%% description
% This script analyzes the data from running PCBA on the Segway robot, and
% from running fmincon on the POPs generated by the Segway.
%
% Author: Shreyas Kousik
% Created: 5 Dec 2019
% Updated: 7 Jan 2020
%
%% user parameters
data_directory = '~/MATLAB/GlobOptBernstein/hardware_demo/' ;
save_pdf_flag = false ;

%% automated from here
% get files in directory
files = dir(data_directory) ;

% set up to extract relevant data
pcba_alg_time = [] ;
pcba_result = [] ;
pcba_feas = [] ;

fmincon_alg_time =  [] ;
fmincon_result =  [] ;
fmincon_feas = [] ;

num_cons = [] ;


for idx = 1:length(files)
    % get the current filename
    n = files(idx).name ;
    
    % load the data if it's #relevant
    if contains(n,'comparison')
        disp(['loading ',n])
        
        I = load(n) ;
        I = I.infos_of_planner ;
        
        pcba_alg_time = [pcba_alg_time, I.bernstein_alg_time] ;
        pcba_result = [pcba_result, I.bernstein_result] ;
        pcba_feas = [pcba_feas, I.bernstein_feas] ;
        
        fmincon_alg_time =  [fmincon_alg_time, I.fmincon_alg_time] ;
        fmincon_result =  [fmincon_result, I.fmincon_result] ;
        fmincon_feas = [fmincon_feas, I.fmincon_feas] ;
        
        num_cons = [num_cons, I.numCons] ;
    end
end

%% process data
% sort data by number of constraints
[num_cons,idxs] = sort(num_cons) ;

pcba_alg_time = pcba_alg_time(:,idxs) ;
pcba_result = pcba_result(:,idxs) ;
pcba_feas = pcba_feas(:,idxs) ;

fmincon_alg_time =  fmincon_alg_time(:,idxs) ;
fmincon_result =  fmincon_result(:,idxs) ;
fmincon_feas = fmincon_feas(:,idxs) ;

% compare results
N_attempts = size(fmincon_result,1) ;
pcba_result_big = repmat(pcba_result,25,1) ;
fmincon_feas_log = ~isnan(fmincon_result) ;
pcba_feas_log = ~isnan(pcba_result_big) ;
feas_log = fmincon_feas_log & pcba_feas_log ;
diff_result = fmincon_result(feas_log) - pcba_result_big(feas_log) ;
mean(diff_result > 0)

%% feasibility and optimality results
pcba_average_feasibility = mean(isnan(pcba_feas)) ;
fmincon_average_feasibility = mean(any(isnan(fmincon_feas),1)) ;
fmincon_total_feasibility = mean(isnan(fmincon_feas(:))) ;


diff_in_result = fmincon_result - repmat(pcba_result,N_attempts,1) ;
feasible_result_log = ~isnan(diff_in_result) ;

diff_in_feasible_results = diff_in_result(feasible_result_log) ;
diff_is_positive = diff_in_feasible_results > 0 ;

diff_pct_of_pcba = diff_in_result ./ repmat(pcba_result,N_attempts,1) ;
diff_pct_of_pcba = diff_pct_of_pcba(feasible_result_log)  ;

%% display feasibility and optimality results
clc

disp('--- feasibility results ---')
disp(['PCBA infeasible percent: ',num2str(100*pcba_average_feasibility),' %'])
disp(['fmincon infeasible percent (out of all attempts): ',num2str(100*fmincon_total_feasibility),' %'])
disp(['fmincon infeasible percent (out of all POPs): ',num2str(100*fmincon_average_feasibility),' %'])

disp(' ')
disp('--- optimality results ---')
disp(['fmincon solution pct of PCBA solution: ',num2str(100 + 100*mean(diff_pct_of_pcba(:))),' %'])
disp(['fmincon solution > PCBA solution: ',num2str(100*mean(diff_is_positive(:))),' %'])
disp(' ')

%% plot timing results
f1 = figure(1) ; clf ;

subplot(2,1,1) ; hold on ;
plot(num_cons,log10(mean(pcba_alg_time,1)),'bx','MarkerSize',6,'LineWidth',1) ;
plot(num_cons,log10(mean(fmincon_alg_time,1)),'r+','MarkerSize',6,'LineWidth',1) ;
ylabel('mean [log_{10}(s)]')
title('solve time vs. number of constraints')
axis([num_cons(1),num_cons(end), -2.5, 1.5])
legend('PCBA','fmincon','location','northwest')
set(gca,'FontSize',14)

subplot(2,1,2) ; hold on ;
plot(num_cons,log10(std(pcba_alg_time,1)),'bx','MarkerSize',6,'LineWidth',1) ;
plot(num_cons,log10(std(fmincon_alg_time,1)),'r+','MarkerSize',6,'LineWidth',1) ;
xlabel('number of constraints')
ylabel('std. dev. [log_{10}(s)]')
axis([num_cons(1),num_cons(end), -4 2])
set(gca,'FontSize',14)

%% plot number of constraints per trial
f2 = figure(2) ; clf ;
h = histogram(num_cons) ;

% set the histogram ticks
xticks(h.BinEdges)

% labels etc.
xlabel('number of constraints')
ylabel('number of POPs')
title('number of constraints per trial')
set(gca,'FontSize',15) ;
set(f2,'Position',[ 637   528   560   245])

%% save output
if save_pdf_flag
    save_figure_to_pdf(f1,'pcba_vs_fmincon_solve_time.pdf')
    save_figure_to_pdf(f2,'constraint_frequency.pdf')
end