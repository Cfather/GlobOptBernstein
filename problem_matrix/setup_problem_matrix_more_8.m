function [cost,constraints,feasible_point] = setup_problem_matrix_more_8(num)
cost = [[   0,   0,   0,   0,    221.0]
        [ 1.0,   0,   0,   0,    -44.0]
        [ 2.0,   0,   0,   0,      4.0]
        [   0, 1.0,   0,   0,    360.0]
        [   0, 2.0,   0,   0,   2800.0]
        [   0, 3.0,   0,   0,   3200.0]
        [   0, 4.0,   0,   0,   1600.0]
        [ 1.0, 1.0,   0,   0,     80.0]
        [   0,   0, 1.0,   0,  -1600.0]
        [   0,   0, 2.0,   0,   9620.0]
        [   0,   0, 3.0,   0, -25600.0]
        [   0,   0, 4.0,   0,  41600.0]
        [   0, 1.0, 1.0,   0,  -9600.0]
        [   0, 2.0, 1.0,   0, -19200.0]
        [   0, 3.0, 1.0,   0, -12800.0]
        [   0, 1.0, 2.0,   0,  38400.0]
        [   0, 2.0, 2.0,   0,  38400.0]
        [   0, 1.0, 3.0,   0, -51200.0]
        [   0,   0,   0, 2.0,     20.0]
        [   0,   0,   0, 4.0,  16000.0]
        [   0,   0, 1.0, 1.0,    -40.0]
        [   0,   0, 3.0, 1.0, -64000.0]
        [   0,   0, 2.0, 2.0,  96000.0]
        [   0,   0, 1.0, 3.0, -64000.0]];

degree = [  0, 0, 0, 0;
            2, 0, 0, 0;
            0, 2, 0, 0;
            0, 0, 2, 0;
            0, 0, 0, 2;
            1, 1, 0, 0;
            0, 1, 1, 0;
            1, 0, 1, 0;
            1, 0, 0, 1;
            0, 1, 0, 1;
            0, 0, 1, 1;
            1, 0, 0, 0;
            0, 1, 0, 0;
            0, 0, 1, 0;
            0, 0, 0, 1];
         
constraints = cell(num,1);

feasible_point = rand(4,1);

for i = 1:num
    rand_num = 10 * rand(14,1) - 5;
    coef = [0;rand_num];
    con_mat = [degree,coef];
    diff = evaluate_function(con_mat,feasible_point);
    if diff >= 0
        con_mat(1,5) = con_mat(1,5) - diff - rand() / 10;
    end
    
    constraints(i) = {con_mat};
end

end

