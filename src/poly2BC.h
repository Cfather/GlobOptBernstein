/*
Constrained Global Optimization Using Bernstein Algorithm

Copyright: ROAHMLAB, University of Michigan

Arthor: Bohao Zhang (jimzhang@umich.edu)

Insturction: This file includes the headers and the libraries that the whole project will need. The class representing a polynomial and some constant variables are included as well.
*/

# ifndef POLY_2_BC_H_INCLUDED
# define POLY_2_BC_H_INCLUDED

#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <cuda.h>
#include <cuda_runtime_api.h>
#include <stdint.h>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <stdint.h>
#include <vector>
#include "mex.h"

/*
choosenk[i][j] = (i >= j) ? C(i,j) : 0

The combinations are used to compute the Bernstein coefficients of a polynomial over interval [0,1].
*/
const float choosenk[25][25] = {
	{1         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         },
	{1         ,1         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         },
	{1         ,2         ,1         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         },
	{1         ,3         ,3         ,1         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         },
	{1         ,4         ,6         ,4         ,1         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         },
	{1         ,5         ,10        ,10        ,5         ,1         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         },
	{1         ,6         ,15        ,20        ,15        ,6         ,1         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         },
	{1         ,7         ,21        ,35        ,35        ,21        ,7         ,1         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         },
	{1         ,8         ,28        ,56        ,70        ,56        ,28        ,8         ,1         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         },
	{1         ,9         ,36        ,84        ,126       ,126       ,84        ,36        ,9         ,1         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         },
	{1         ,10        ,45        ,120       ,210       ,252       ,210       ,120       ,45        ,10        ,1         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         },
	{1         ,11        ,55        ,165       ,330       ,462       ,462       ,330       ,165       ,55        ,11        ,1         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         },
	{1         ,12        ,66        ,220       ,495       ,792       ,924       ,792       ,495       ,220       ,66        ,12        ,1         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         },
	{1         ,13        ,78        ,286       ,715       ,1287      ,1716      ,1716      ,1287      ,715       ,286       ,78        ,13        ,1         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         },
	{1         ,14        ,91        ,364       ,1001      ,2002      ,3003      ,3432      ,3003      ,2002      ,1001      ,364       ,91        ,14        ,1         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         },
	{1         ,15        ,105       ,455       ,1365      ,3003      ,5005      ,6435      ,6435      ,5005      ,3003      ,1365      ,455       ,105       ,15        ,1         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         },
	{1         ,16        ,120       ,560       ,1820      ,4368      ,8008      ,11440     ,12870     ,11440     ,8008      ,4368      ,1820      ,560       ,120       ,16        ,1         ,0         ,0         ,0         ,0         ,0         ,0         ,0         ,0         },
	{1         ,17        ,136       ,680       ,2380      ,6188      ,12376     ,19448     ,24310     ,24310     ,19448     ,12376     ,6188      ,2380      ,680       ,136       ,17        ,1         ,0         ,0         ,0         ,0         ,0         ,0         ,0         },
	{1         ,18        ,153       ,816       ,3060      ,8568      ,18564     ,31824     ,43758     ,48620     ,43758     ,31824     ,18564     ,8568      ,3060      ,816       ,153       ,18        ,1         ,0         ,0         ,0         ,0         ,0         ,0         },
	{1         ,19        ,171       ,969       ,3876      ,11628     ,27132     ,50388     ,75582     ,92378     ,92378     ,75582     ,50388     ,27132     ,11628     ,3876      ,969       ,171       ,19        ,1         ,0         ,0         ,0         ,0         ,0         },
	{1         ,20        ,190       ,1140      ,4845      ,15504     ,38760     ,77520     ,125970    ,167960    ,184756    ,167960    ,125970    ,77520     ,38760     ,15504     ,4845      ,1140      ,190       ,20        ,1         ,0         ,0         ,0         ,0         },
	{1         ,21        ,210       ,1330      ,5985      ,20349     ,54264     ,116280    ,203490    ,293930    ,352716    ,352716    ,293930    ,203490    ,116280    ,54264     ,20349     ,5985      ,1330      ,210       ,21        ,1         ,0         ,0         ,0         },
	{1         ,22        ,231       ,1540      ,7315      ,26334     ,74613     ,170544    ,319770    ,497420    ,646646    ,705432    ,646646    ,497420    ,319770    ,170544    ,74613     ,26334     ,7315      ,1540      ,231       ,22        ,1         ,0         ,0         },
	{1         ,23        ,253       ,1771      ,8855      ,33649     ,100947    ,245157    ,490314    ,817190    ,1144066   ,1352078   ,1352078   ,1144066   ,817190    ,490314    ,245157    ,100947    ,33649     ,8855      ,1771      ,253       ,23        ,1         ,0         },
	{1         ,24        ,276       ,2024      ,10626     ,42504     ,134596    ,346104    ,735471    ,1307504   ,1961256   ,2496144   ,2704156   ,2496144   ,1961256   ,1307504   ,735471    ,346104    ,134596    ,42504     ,10626     ,2024      ,276       ,24        ,1         }
};

/*
dilationMat[i][j] = (i >= j) ? (C(i,j) / (2 ^ i)) : 0

This matrix is used to compute new Bernstein patches when dividing one into two equally.
Suppose the Bernstein coefficients over a given interval is b_0, b_1, ..., b_n. According to the De Casteljau Algorithm,
The i th (index starts from 0) Bernstein coefficient over the left subdivision interval will be 
b_L_i = \sum_{j=0}^i (dilationMat[i][j] * b_j)
The i th (index starts from 0) Bernstein coefficient over the right subdivision interval will be
b_R_i = \sum_{j=0}^i (dilationMat[i][j] * b_{n - j})
*/
__device__ const float dilationMat[25][25] = {
{},
{},
{},
{},
{},
{},
{},
{},
{0.003906250000000000000000, 0.031250000000000000000000, 0.109375000000000000000000, 0.218750000000000000000000, 0.273437500000000000000000, 0.218750000000000000000000, 0.109375000000000000000000, 0.031250000000000000000000, 0.003906250000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000 },
{0.001953125000000000000000, 0.017578125000000000000000, 0.070312500000000000000000, 0.164062500000000000000000, 0.246093750000000000000000, 0.246093750000000000000000, 0.164062500000000000000000, 0.070312500000000000000000, 0.017578125000000000000000, 0.001953125000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000 },
{0.000976562500000000000000, 0.009765625000000000000000, 0.043945312500000000000000, 0.117187500000000000000000, 0.205078125000000000000000, 0.246093750000000000000000, 0.205078125000000000000000, 0.117187500000000000000000, 0.043945312500000000000000, 0.009765625000000000000000, 0.000976562500000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000 },
{0.000488281250000000000000, 0.005371093750000000000000, 0.026855468750000000000000, 0.080566406250000000000000, 0.161132812500000000000000, 0.225585937500000000000000, 0.225585937500000000000000, 0.161132812500000000000000, 0.080566406250000000000000, 0.026855468750000000000000, 0.005371093750000000000000, 0.000488281250000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000 },
{0.000244140625000000000000, 0.002929687500000000000000, 0.016113281250000000000000, 0.053710937500000000000000, 0.120849609375000000000000, 0.193359375000000000000000, 0.225585937500000000000000, 0.193359375000000000000000, 0.120849609375000000000000, 0.053710937500000000000000, 0.016113281250000000000000, 0.002929687500000000000000, 0.000244140625000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000 },
{0.000122070312500000000000, 0.001586914062500000000000, 0.009521484375000000000000, 0.034912109375000000000000, 0.087280273437500000000000, 0.157104492187500000000000, 0.209472656250000000000000, 0.209472656250000000000000, 0.157104492187500000000000, 0.087280273437500000000000, 0.034912109375000000000000, 0.009521484375000000000000, 0.001586914062500000000000, 0.000122070312500000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000 },
{0.000061035156250000000000, 0.000854492187500000000000, 0.005554199218750000000000, 0.022216796875000000000000, 0.061096191406250000000000, 0.122192382812500000000000, 0.183288574218750000000000, 0.209472656250000000000000, 0.183288574218750000000000, 0.122192382812500000000000, 0.061096191406250000000000, 0.022216796875000000000000, 0.005554199218750000000000, 0.000854492187500000000000, 0.000061035156250000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000 },
{0.000030517578125000000000, 0.000457763671875000000000, 0.003204345703125000000000, 0.013885498046875000000000, 0.041656494140625000000000, 0.091644287109375000000000, 0.152740478515625000000000, 0.196380615234375000000000, 0.196380615234375000000000, 0.152740478515625000000000, 0.091644287109375000000000, 0.041656494140625000000000, 0.013885498046875000000000, 0.003204345703125000000000, 0.000457763671875000000000, 0.000030517578125000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000 },
{0.000015258789062500000000, 0.000244140625000000000000, 0.001831054687500000000000, 0.008544921875000000000000, 0.027770996093750000000000, 0.066650390625000000000000, 0.122192382812500000000000, 0.174560546875000000000000, 0.196380615234375000000000, 0.174560546875000000000000, 0.122192382812500000000000, 0.066650390625000000000000, 0.027770996093750000000000, 0.008544921875000000000000, 0.001831054687500000000000, 0.000244140625000000000000, 0.000015258789062500000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000 },
{0.000007629394531250000000, 0.000129699707031250000000, 0.001037597656250000000000, 0.005187988281250000000000, 0.018157958984375000000000, 0.047210693359375000000000, 0.094421386718750000000000, 0.148376464843750000000000, 0.185470581054687500000000, 0.185470581054687500000000, 0.148376464843750000000000, 0.094421386718750000000000, 0.047210693359375000000000, 0.018157958984375000000000, 0.005187988281250000000000, 0.001037597656250000000000, 0.000129699707031250000000, 0.000007629394531250000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000 },
{0.000003814697265625000000, 0.000068664550781250000000, 0.000583648681640625000000, 0.003112792968750000000000, 0.011672973632812500000000, 0.032684326171875000000000, 0.070816040039062500000000, 0.121398925781250000000000, 0.166923522949218750000000, 0.185470581054687500000000, 0.166923522949218750000000, 0.121398925781250000000000, 0.070816040039062500000000, 0.032684326171875000000000, 0.011672973632812500000000, 0.003112792968750000000000, 0.000583648681640625000000, 0.000068664550781250000000, 0.000003814697265625000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000 },
{0.000001907348632812500000, 0.000036239624023437500000, 0.000326156616210937500000, 0.001848220825195312500000, 0.007392883300781250000000, 0.022178649902343750000000, 0.051750183105468750000000, 0.096107482910156250000000, 0.144161224365234375000000, 0.176197052001953125000000, 0.176197052001953125000000, 0.144161224365234375000000, 0.096107482910156250000000, 0.051750183105468750000000, 0.022178649902343750000000, 0.007392883300781250000000, 0.001848220825195312500000, 0.000326156616210937500000, 0.000036239624023437500000, 0.000001907348632812500000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000 },
{0.000000953674316406250000, 0.000019073486328125000000, 0.000181198120117187500000, 0.001087188720703125000000, 0.004620552062988281250000, 0.014785766601562500000000, 0.036964416503906250000000, 0.073928833007812500000000, 0.120134353637695312500000, 0.160179138183593750000000, 0.176197052001953125000000, 0.160179138183593750000000, 0.120134353637695312500000, 0.073928833007812500000000, 0.036964416503906250000000, 0.014785766601562500000000, 0.004620552062988281250000, 0.001087188720703125000000, 0.000181198120117187500000, 0.000019073486328125000000, 0.000000953674316406250000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000 },
{0.000000476837158203125000, 0.000010013580322265625000, 0.000100135803222656250000, 0.000634193420410156250000, 0.002853870391845703125000, 0.009703159332275390625000, 0.025875091552734375000000, 0.055446624755859375000000, 0.097031593322753906250000, 0.140156745910644531250000, 0.168188095092773437500000, 0.168188095092773437500000, 0.140156745910644531250000, 0.097031593322753906250000, 0.055446624755859375000000, 0.025875091552734375000000, 0.009703159332275390625000, 0.002853870391845703125000, 0.000634193420410156250000, 0.000100135803222656250000, 0.000010013580322265625000, 0.000000476837158203125000, 0.000000000000000000000000, 0.000000000000000000000000, 0.000000000000000000000000 },
{0.000000238418579101562500, 0.000005245208740234375000, 0.000055074691772460937500, 0.000367164611816406250000, 0.001744031906127929687500, 0.006278514862060546875000, 0.017789125442504882812500, 0.040660858154296875000000, 0.076239109039306640625000, 0.118594169616699218750000, 0.154172420501708984375000, 0.168188095092773437500000, 0.154172420501708984375000, 0.118594169616699218750000, 0.076239109039306640625000, 0.040660858154296875000000, 0.017789125442504882812500, 0.006278514862060546875000, 0.001744031906127929687500, 0.000367164611816406250000, 0.000055074691772460937500, 0.000005245208740234375000, 0.000000238418579101562500, 0.000000000000000000000000, 0.000000000000000000000000 },
{0.000000119209289550781250, 0.000002741813659667968750, 0.000030159950256347656250, 0.000211119651794433593750, 0.001055598258972167968750, 0.004011273384094238281250, 0.012033820152282714843750, 0.029224991798400878906250, 0.058449983596801757812500, 0.097416639328002929687500, 0.136383295059204101562500, 0.161180257797241210937500, 0.161180257797241210937500, 0.136383295059204101562500, 0.097416639328002929687500, 0.058449983596801757812500, 0.029224991798400878906250, 0.012033820152282714843750, 0.004011273384094238281250, 0.001055598258972167968750, 0.000211119651794433593750, 0.000030159950256347656250, 0.000002741813659667968750, 0.000000119209289550781250, 0.000000000000000000000000 },
{0.000000059604644775390625, 0.000001430511474609375000, 0.000016450881958007812500, 0.000120639801025390625000, 0.000633358955383300781250, 0.002533435821533203125000, 0.008022546768188476562500, 0.020629405975341796875000, 0.043837487697601318359375, 0.077933311462402343750000, 0.116899967193603515625000, 0.148781776428222656250000, 0.161180257797241210937500, 0.148781776428222656250000, 0.116899967193603515625000, 0.077933311462402343750000, 0.043837487697601318359375, 0.020629405975341796875000, 0.008022546768188476562500, 0.002533435821533203125000, 0.000633358955383300781250, 0.000120639801025390625000, 0.000016450881958007812500, 0.000001430511474609375000, 0.000000059604644775390625 }
};

/*
data structure for polynomials
*/
class poly
{
public:
	/*
	EFFECT: default constructer of the class
	*/
	poly();

	/*
	EFFECT: default destructer of the class
	*/
	~poly();

	/*
	REQUIRE: 
		numDimension_input -> number of dimensions of this polynomial, n
		numTerms_input	   -> number of terms of this polynomial, m
		data_mat		   -> a matrix describing the polynomial
							  [[degree of x_1, ..., degree of x_n, coefficient of this term],	 -
															.								     |
															.								   m rows
															.									 |
							   [degree of x_1, ..., degree of x_n, coefficient of this term]]	 -
							   <----                    n + 1 columns                  ---->
	EEFECT: defined constructer of the class
	*/
	poly(uint32_t numDimension_input, uint32_t numTerms_input, float* data_mat);

	/*
	EFFECT: another default destructer of the class, using MATLAB mexArray as input for data_mat
	*/
	poly(uint32_t numDimension_input, uint32_t numTerms_input, double* data_mat);

	/*
	REQUIRE:
		numDimension_input -> number of dimensions of this polynomial, n
		numTerms_input	   -> number of terms of this polynomial, m
		degree_input	   -> an array including the degree of x
							  [degree of x_1, ..., degree of x_n, degree of x_1, ..., degree of x_n, ..., degree of x_1, ..., degree of x_n]
							   <----           n           ---->  <----           n           ---->       <----           n           ---->
							             The first term                    The second term                           The m th term
							  <----                                         m * n entries                                              ---->
		coef_input	       -> an array including the coefficents of all the terms
							  [coefficient of 1st term, coefficient of 2nd term, ..., coefficient of m th term]
							  <----                                 m entries                             ---->
	EEFECT: defined constructer of the class
	*/
	poly(uint32_t numDimension_input, uint32_t numTerms_input, double* degree_input, double* coef_input);

	/*
	EEFECT: print all the details of this polynomial on screen. used for debug.
	*/
	void printDetails();

	/*
	REQUIRE: 
		res		  -> a pointer of polynomial class
		res_value
		dim       -> dim < numDimension
	EEFECT: asign res to be the dim th partial derivative of the polynomial. assign res_value to be the constant term of the partial derivative.
	MODIFIES: res, res_value
	*/
	void partialDerivative(poly* &res, float &res_value, uint32_t dim);

	// number of dimension
	uint32_t numDimension;

	// number of terms
	uint32_t numTerms;

	// an array for coefficients
	float * coeff;

	// an array for degrees of x
	uint32_t * degree;

	// an array for the max degree over each dimension
	uint32_t * maxDegree;
};

# endif